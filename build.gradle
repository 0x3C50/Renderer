plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        withSourcesJar()
    }

    version = project.mod_version
    group = project.maven_group

    // floader needs to be in every sub module
    dependencies {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    }

    processResources {
        inputs.property "version", version

        filesMatching("fabric.mod.json") {
            expand "version": version
        }
    }
}

subprojects {
    // skip our API module

    dependencies {
        // include the root project because that's where our common code is
        implementation(project(path: ":", configuration: "namedElements")) {
            // having 2 floaders from the sub project and root project causes issues so we get rid of one.
            exclude group: "net.fabricmc", module: "fabric-loader"
        }
    }
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroup 'org.ladysnake'
            includeGroupByRegex 'dev\\.onyxstudios.*'
        }
    }
}

configurations {
    modImpl
    libImpl
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-resource-loader-v0"
    ]
    // Add each module we need
    apiModules.forEach {
        modImpl(fabricApi.module(it, project.fabric_version))
    }

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    api(group: 'org.apache.xmlgraphics', name: 'batik-transcoder', version: '1.16') {
        exclude group: "xml-apis", module: "xml-apis"
        exclude group: "commons-io", module: "commons-io"
    }
    api(group: 'org.apache.xmlgraphics', name: 'batik-codec', version: '1.16') {
        exclude group: "xml-apis", module: "xml-apis"
        exclude group: "commons-io", module: "commons-io"
    }
    api(group: "de.javagl", name: "obj", version: "0.4.0")

    include modImplementation("org.ladysnake:satin:1.14.0")

    configurations.modImpl.dependencies.each {
        modImplementation(it)
    }

    configurations.libImpl.dependencies.each {
        implementation(it)
//		include(it)
    }

}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    from {
        configurations.libImpl.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
